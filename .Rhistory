install.packages('maxnodf')
install.packages(rstatix)
install.packages("rstatix")
install.packages("car")
data <- read.csv('/Users/sabinedritz/Documents/Assembling_Nestedness/results/03_16_2022/null_K_uniform/lifespans/quan_diff.csv')
#testing for normality
qqnorm(data)
data
#testing for normality
qqnorm(data$spc_gen_spc)
source("~/Documents/Assembling_Nestedness/R_code/add_lifespan_censored.R")
source("~/Documents/Assembling_Nestedness/R_code/add_lifespan_censored.R")
source("~/Documents/Assembling_Nestedness/R_code/add_lifespan_censored.R")
source("~/Documents/Assembling_Nestedness/R_code/add_lifespan_censored.R")
source("~/Documents/Assembling_Nestedness/R_code/add_lifespan_censored.R")
setwd("~/Documents/Empirical_Assembly")
source("~/Documents/Empirical_Assembly/species_breakdown.R")
source("~/Documents/Empirical_Assembly/species_breakdown.R")
source("~/Documents/Empirical_Assembly/species_breakdown.R")
both_treat$species_gs
source("~/Documents/Empirical_Assembly/species_breakdown.R")
?anyof
?any_of
source("~/Documents/Empirical_Assembly/species_breakdown.R")
sp_data$mix
source("~/Documents/Empirical_Assembly/species_breakdown.R")
source("~/Documents/Empirical_Assembly/species_breakdown.R")
all_sites
match(all_sites$species_gs, species_stats$species_gs)
species_stats[match(all_sites$species_gs, species_stats$species_gs), ]
species_stats[species_stats$treatment == 1,]
# read in data table
data <- read.csv('data_table.csv')
data <- data[which(data$nondata != 'nondata'), ]
data[data$treatment == 1, 'mix_orig'] <- NA
data[data$pairs == "na", 'pairs'] <- NA
head(data)
head(data[data$treatment == 1,])
#################### find species degree in each round
pol_stats <- data[, c('treatment', 'mix_orig', 'pairs', 'round', 'specimen_gs')]
pol_stats$type <- rep('a', nrow(pol_stats))
colnames(pol_stats) <- c('treatment', 'mix', 'site', 'round', 'species_gs', 'type')
plant_stats <- data[, c('treatment', 'mix_orig', 'pairs', 'round', 'plant_gs')]
plant_stats$type <- rep('p', nrow(plant_stats))
colnames(plant_stats) <- c('treatment', 'mix', 'site', 'round', 'species_gs', 'type')
# combine the data
species_stats_round <- rbind(pol_stats, plant_stats)
pol_stats['mix' != 'old',]
pol_stats[pol_stats$mix != 'old', 'mix']
# read in data table
data <- read.csv('data_table.csv')
data <- data[which(data$nondata != 'nondata'), ]
unique(data$mix_orig)
source("~/Documents/Empirical_Assembly/species_breakdown.R")
all_sites_jmp
both_treat_jmp <- species_stats[both_treat$species_gs == any_of(species_stats$species_gs), ]
select(any_of(species_stats$species_gs))
source("~/Documents/Empirical_Assembly/species_breakdown.R")
all_sites_jmp
which(all_sites$species_gs %in% species_stats$species_gs)
all_sites$species_gs
species_stats$species_gs
which(species_stats$species_gs %in% all_sites$species_gs)
source("~/Documents/Empirical_Assembly/species_breakdown.R")
all_sites_jmp
source("~/Documents/Empirical_Assembly/species_breakdown.R")
all_sites_jmp
source("~/Documents/Empirical_Assembly/species_breakdown.R")
all_sites_jmp
unique(data$pairs != 'na')
unique(data$pairs)
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
# remove NA
freq[is.na(freq)] <- 0
# smaller groups
plot_freq <- freq
plot_freq <- plot_freq[which(plot_freq$species == 'lasioglossum_incompletum')]
# separate groups from data
groups <- plot_freq[, 1:7]
plot_freq <- plot_freq[, 8:148]
plot_freq <- apply(plot_freq, 2, function(x) as.numeric(x))
# compute Bray-Curtis distance
sol <- metaMDS(comm = plot_freq, k = 3)
sol <- metaMDS(comm = plot_freq, previous.best = sol, k = 3)
plot_freq
# smaller groups
plot_freq <- freq
plot_freq <- plot_freq[which(plot_freq$species == 'lasioglossum_incompletum'),]
plot_freq
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
# container for motif frequency data
freq <- data.frame(matrix(nrow = 0, ncol = 154))
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
plot_freq
sum(plot_freq, 2)
sum(plot_freq)
dim(plot_freq)
rowSums(plot_freq)
rowSums(plot_freq) == 0
plot_freq
colSums(plot_freq)
# smaller groups
plot_freq <- freq
plot_freq <- plot_freq[which(plot_freq$species == 'lasioglossum_incompletum'),]
# separate groups from data
groups <- plot_freq[, 1:7]
plot_freq <- plot_freq[, 8:148]
plot_freq <- apply(plot_freq, 2, function(x) as.numeric(x))
plot_freq <- plot_freq[, colSums(plot_freq) > 0]
plot_freq
colSums(plot_freq) > 0
colSums(plot_freq)
rowSums(plot_freq)
# smaller groups
plot_freq <- freq
plot_freq <- plot_freq[which(plot_freq$species == 'lasioglossum_incompletum'),]
# separate groups from data
groups <- plot_freq[, 1:7]
plot_freq <- plot_freq[, 8:148]
plot_freq <- apply(plot_freq, 2, function(x) as.numeric(x))
plot_freq <- plot_freq[, colSums(plot_freq) > 0]
plot_freq
# compute Bray-Curtis distance
sol <- metaMDS(comm = plot_freq, k = 3)
sol <- metaMDS(comm = plot_freq, previous.best = sol, k = 3)
colSums(plot_freq)
# plot NMDS
ordiplot(sol, type = 'n')
ordihull(sol, groups=groups$round, draw="polygon", col="grey90", label=F)
colors <- rep('red', nrow(groups))
colors[which(groups$round == 1)] <- 'orange'
colors[which(groups$round == 2)] <- 'yellow'
colors[which(groups$round == 3)] <- 'green'
colors[which(groups$round == 4)] <- 'blue'
colors[which(groups$round == 5)] <- 'purple'
colors[which(groups$round == 6)] <- 'black'
orditorp(sol, display = 'sites', col = colors)
# plot NMDS
ordiplot(sol)
# plot NMDS
ordiplot(sol, display = 'sites')
?node_positions
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
plot_freq
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
rowSums(comm)
colSums(comm)
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
dis
colSums(dis)
typeof(dis)
sum(dis)
rowSums(dis)
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
x
rowSums(x)
d
debugSource("~/Documents/Empirical_Assembly/spc_role_freq.R")
groups$round
# compute Bray-Curtis distance
sol <- metaMDS(comm = plot_freq, k = 2)
sol <- metaMDS(comm = plot_freq, previous.best = sol, k = 2)
# plot NMDS
ordiplot(sol, display = 'sites')
# smaller groups
plot_freq <- freq
plot_freq <- plot_freq[which(plot_freq$species == c('lasioglossum_incompletum', 'halictus_tripartitus'),]
# separate groups from data
groups <- plot_freq[, 1:7]
plot_freq <- plot_freq[, 8:148]
plot_freq <- apply(plot_freq, 2, function(x) as.numeric(x))
plot_freq <- plot_freq[, colSums(plot_freq) > 0]
# compute Bray-Curtis distance
sol <- metaMDS(comm = plot_freq, k = 2)
# smaller groups
plot_freq <- freq
plot_freq <- plot_freq[which(plot_freq$species %in% c('lasioglossum_incompletum', 'halictus_tripartitus')),]
# separate groups from data
groups <- plot_freq[, 1:7]
plot_freq <- plot_freq[, 8:148]
plot_freq <- apply(plot_freq, 2, function(x) as.numeric(x))
plot_freq <- plot_freq[, colSums(plot_freq) > 0]
# compute Bray-Curtis distance
sol <- metaMDS(comm = plot_freq, k = 2)
plot_freq
rowSums(plot_freq)
colSums(plot_freq)
# compute Bray-Curtis distance
sol <- metaMDS(comm = plot_freq, k = 2)
library(bipartite)
network_data <- read.csv("network_table_data.csv", header = TRUE)
setwd("~/Documents/Plant_Invasions/R_code_publish")
network_data <- read.csv("network_table_data.csv", header = TRUE)
network_data_m3 <- network_data[network_data$death_case == 3,]
network_data_m3_l1 <- network_data_m3[network_data_m3$InvP_k_alg == 1,]
network_data_m3_l1_inv <- network_data_m3_l1[InvP_inv == 1]
network_data_m3_l1_inv <- network_data_m3_l1[network_data_m3_l1$InvP_inv == 1]
network_data_m3_l1$InvP_inv
network_data_m3_l1_inv <- network_data_m3_l1[network_data_m3_l1$InvP_inv == 1,]
inv_types <- c(3, 4, 8)
net_groups <- c(400, 800, 1200)
inv_type <- 1
net_group <- 1
# subset data for only one invader type
data <- network_data_m3_l1_inv[network_data_m3_l1_inv$inv_type == inv_types(inv_type)]
inv_types <- c(3, 4, 8)
net_groups <- c(400, 800, 1200)
# subset data for only one invader type
data <- network_data_m3_l1_inv[network_data_m3_l1_inv$inv_type == inv_types(inv_type)]
# subset data for only one invader type
data <- network_data_m3_l1_inv[network_data_m3_l1_inv$inv_type == inv_types[inv_type]]
# subset data for only one invader type
data <- network_data_m3_l1_inv[network_data_m3_l1_inv$inv_type == inv_types[inv_type],]
# subset data for only one group of network sizes
data <- data[data$matID < net_groups[net_group],]
if (net_group > 1) {
data <- data[data$matID > net_groups[net_group - 1],]
}
print(paste("wilcox test for invader: ", inv_type, "and nework group: ", net_group, " between initial and final total connected pollinator density /n", sep = ""))
wilcox.test(data$init_A, data$fin_A)
print(paste("Invader: ", inv_types(inv_type), " and Nework group: ", net_groups(net_group), " between initial and final total connected pollinator density /n", sep = ""))
print(paste("Invader: ", inv_types[inv_type], " and Nework group: ", net_groups[net_group], " between initial and final total connected pollinator density /n", sep = ""))
print(paste("Invader: ", inv_types[inv_type]))
print(paste("Nework group: ", net_groups[net_group]))
print("Initial and final total connected pollinator density")
wilcox.test(data$init_A, data$fin_A)
library(rstatix)
library(car)
data <- read.csv('/Users/sabinedritz/Documents/Dritz_Code/network_table_data.csv')
data <- read.csv('network_table_data.csv')
data$link_case <- as.factor(data$link_case)
data_m3 <- data[data$death_case == 3,]
data_m3_l1 <- data_m3[data_m3$link_case == 1,]
data_m3_l2 <- data_m3[data_m3$link_case == 2,]
data_m3_l3 <- data_m3[data_m3$link_case == 3,]
#correlation between plant degree and initial connected pollinator abundance
cor.test(data_m3$InvP_k, data_m3$init_A)
cor.test(data_m3_l1$InvP_k, data_m3_l1$init_A)
cor.test(data_m3_l2$InvP_k, data_m3_l2$init_A)
cor.test(data_m3_l3$InvP_k, data_m3_l3$init_A)
#testing for normality
qqnorm(data_m3_l1$init_A)
qqline(data_m3_l1$init_A)
qqnorm(data_m3_l2$init_A)
qqline(data_m3_l2$init_A)
qqnorm(data_m3_l3$init_A)
qqline(data_m3_l3$init_A)
#testing for equal variances
leveneTest(init_A ~ as.factor(link_case), data = data_m3)
bartlett.test(init_A ~ as.factor(link_case), data = data_m3)
#performing kruskal's test
kruskal.test(init_A ~ link_case, data = data_m3)
?cor.test
?kruskal.test
?wilcox.test
?ks.test
?wilcox.test
#performing kruskal's test
kruskal.test(init_A ~ InvP_k, data = network_data_m3)
kruskal.test(init_A ~ InvP_k_alg, data = network_data_m3)
kruskal.test(InvP_inv ~ init_A, data = network_data_m3)
?kruskal.test
kruskal.test(init_A, ~ InvP_inv, data = network_data_m3)
kruskal.test(init_A ~ InvP_inv, data = network_data_m3)
?boxplot
boxplot(data = cbind(data$init_A, data$fin_A))
setwd("~/Documents/code_publish")
source("analysis_functions.R")
library(stats)
library(bipartite)
library(graphics)
build_network_table_data()
?maxnodf
?NODFc
?computeModules
?listModuleInformation()
debugSource("~/Documents/code_publish/analysis_functions.R")
table[index, "init_mod"]     <- computeModules(init_alpha)
build_network_table_data
debugSource("~/Documents/code_publish/delete.R")
debugSource("~/Documents/code_publish/delete.R")
setwd("~/Documents/code_publish")
# Read in all the data
plants  <- list.files(pattern = "data/P_")
# Read in all the data
plants  <- list.files(pattern = "/data/P_")
animals <- list.files(pattern = "data/A_")
plants
animals
setwd("~/Documents/code_publish/data")
# Read in all the data
plants  <- list.files(pattern = "P_")
plants
setwd("~/Documents/code_publish")
# Read in all the data
cd("data")
# Read in all the data
plants  <- list.files(path = "./data", pattern = "P_")
plants
animals <- list.files(path = "./data", pattern = "data/A_")
alphas  <- list.files(path = "./data", pattern = "data/Alpha_")
# Read in network data
network_data <- read.csv("network_properties_1200m.csv", header = TRUE)
network_data <- network_data[,1:23]
# create table for all data
table <- matrix(nrow = length(plants), ncol = 55)
colnames(table) = c("matID","P","A","S", "C", "L/S", "L/A", "L/P", "A/P", "gA",
"gP", "GenSD", "VulSD", "mJP", "mJA", "maxJP", "maxJA", "NODFst",
"init_wNODF", "init_mod", "init_indirect_quantity", "init_indirect_quality",
"death_case", "inv_type", "InvP_k", "InvP_k_alg", "InvP_spec",
"InvP_pol", "InvP_rew", "init_alpha", "init_A", "InvP_events",
"InvP_rew_num", "InvP_num", "InvP_intro", "InvP_inv", "fin_alpha",
"fin_A", "P1", "R1", "A1", "P2", "R2", "A2", "P_diff", "R_diff",
"A_diff", "P_extinct", "A_extinct", "P_pol_diff", "A_visit_diff",
"fin_wNODF", "fin_mod", "fin_indirect_quantity", "fin_indirect_quality")
# run on each network
index = 1
network = 1
death_case = 1
link_case = 1
inv_type = 1
index
# Read in data for this network
plant_data <- read.csv(plants[index],   header = FALSE)
?read.csv
# Read in all the data
plants  <- list.files(path = "./data", pattern = "P_")
plants
plant_data <- read.csv(paste("./data/", plants[index]),   header = FALSE)
paste("./data/", plants[index]),
paste("./data/", plants[index])
plant_data <- read.csv(paste("./data/", plants[index], sep = ""),   header = FALSE)
animal_data <- read.csv(paste("./data/", animals[index], sep = ""), header = FALSE)
animals <- list.files(path = "./data", pattern = "A_")
alphas  <- list.files(path = "./data", pattern = "Alpha_")
animal_data <- read.csv(paste("./data/", animals[index], sep = ""), header = FALSE)
alpha_data <- read.csv(paste("./data/", alphas[index], sep = ""),   header = FALSE)
# Write column names
colnames(plant_data) <- c("extinct", "plant_num", "reward_num", "tot_pol", "quantity", "quality", "alpha", "extinct_inv", "plant_num_inv", "reward_num_inv", "tot_pol_inv", "quantity_inv", "quality_inv", "alpha_inv")
colnames(animal_data) <- c("extinct", "animal_num", "tot_visits", "extinct_inv", "animal_num_inv", "tot_visits_inv")
# find indices of connected animals and plants
init_alpha <- alpha_data[, 1:ncol(alpha_data) / 2]
fin_alpha <- alpha_data[, ncol(alpha_data) / 2 + 1:ncol(alpha_data)]
ncol(alpha_data)
ncol(alpha_data) / 2
ncol(alpha_data) / 2 + 1
ncol(alpha_data)
alpha_data[,35:68]
fin_alpha <- alpha_data[, (ncol(alpha_data) / 2 + 1):ncol(alpha_data)]
pol_indices <- which(fin_alpha[1,] != 0)
plant_indices <- c()
for (i in 1:length(pol_indices)) {
plant_indices <- c(plant_indices, which(init_alpha[, pol_indices(i)] != 0))
}
plant_indices
pol_indices
alpha_data
fin_alpha[1,]
pol_indices(i)
plant_indices <- c()
for (i in 1:length(pol_indices)) {
plant_indices <- c(plant_indices, which(init_alpha[, pol_indices[i]] != 0))
}
plant_indices
init_alpha[, pol_indices[i]]
pol_indices[i]
init_alpha
# find indices of connected animals and plants
init_alpha <- alpha_data[, 1:(ncol(alpha_data) / 2)]
fin_alpha <- alpha_data[, (ncol(alpha_data) / 2 + 1):ncol(alpha_data)]
init_alpha
pol_indices <- which(fin_alpha[1,] != 0)
plant_indices <- c()
for (i in 1:length(pol_indices)) {
plant_indices <- c(plant_indices, which(init_alpha[, pol_indices[i]] != 0))
}
plant_indices
init_alpha[, pol_indices[i]]
which(init_alpha[, pol_indices[i]] != 0)
c(plant_indices, which(init_alpha[, pol_indices[i]] != 0))
plant_indices <- c(plant_indices, which(init_alpha[, pol_indices[i]] != 0))
plant_indices
computeModules(init_alpha)
computeModules(init_alpha)@likelihood
build_network_table_data()
source("analysis_functions.R")
library(stats)
library(bipartite)
library(graphics)
build_network_table_data()
